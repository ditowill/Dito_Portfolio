# -*- coding: utf-8 -*-
"""Exploratory Data Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WQwZ_8KyNiBmByLk0OgaiZfAIl21tNpp

#Import Libraries and Data Preparation
"""

import pandas as pd
import numpy as np
def enable_plotly_in_cell():
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''<script src="/static/components/requirejs/require.js"></script>'''))
  init_notebook_mode(connected=False)

from plotly.offline import iplot
import plotly.graph_objs as go

from google.colab import files

df = pd.read_csv("used_car_data.csv")



"""# Checking Data"""

df.head()

df.dtypes

df.shape

df.describe(include="all")

df[df.isna().any("columns")]

"""# Car's Total for Each brand

Create a new column for carBrand (Merek)
"""

Merek = df['Name'].apply(lambda x: str(x).split(" ")[0]).str.lower()
df["Merek"] = Merek

df["Merek"].unique()

df["Merek"].value_counts()

df_carBrand_total = df.groupby(["Merek"]).agg({
    "Name" : "count",
})
df_carBrand_total = df_carBrand_total.reset_index()
df_carBrand_total

df_carBrand_total = df_carBrand_total.sort_values(by=["Name"],ascending= False)
df_carBrand_total

"""Visualiasi"""

enable_plotly_in_cell()

data = go.Bar (
x=df_carBrand_total.Merek,
y=df_carBrand_total.Name
)

layout = {
    "title":{
        "text" : "Car Total per Brand",
        "x":0.5,
    },
    "xaxis":{
        "title":"Car Brand",
    },
    "yaxis":{
        "title":"Car Total",
    }
}

fig = go.Figure(data=data)
iplot(fig)



"""# Used Car's Total for Each Cities

Get data with owner type = second or more
"""

df_Bekas = df[(df['Owner_Type']!= 'First')]

df_Bekas

"""Count Car's Total by Cities"""

df_Bekas = df_Bekas.groupby(["Location"]).agg({
    "Name" : "count"
})
df_Bekas = df_Bekas.sort_values(by="Name",ascending=False)
df_Bekas = df_Bekas.reset_index()

df_Bekas

"""Visualization"""

enable_plotly_in_cell()

data = go.Bar (
x=df_Bekas.Location,
y=df_Bekas.Name,
text = df_Bekas.Name,
textposition= 'outside',
)

layout = {
    "title":{
        "text" : "Used Car per City",
        "x":0.5,
    },
    "xaxis":{
        "title":"Cities",
    },
    "yaxis":{
        "title":"Car's Total",
    }
}

fig = go.Figure(data=data,layout=layout)



iplot(fig)

"""# Car Distribution Per Year

Group By Year
"""

df_year_dist = df.groupby(["Year"]).agg({
    "Name" : "count"
})
df_year_dist = df_year_dist.reset_index()
df_year_dist

enable_plotly_in_cell()

data = go.Bar (
x=df_year_dist.Year,
y=df_year_dist.Name,
text = df_year_dist.Name,
textposition= 'outside',
)

layout = {
    "title":{
        "text" : "Car Distribution per Year",
        "x":0.5,
    },
    "xaxis":{
        "title":"Year",
        "tickangle": 45,
    },
    "yaxis":{
        "title":"Car Total",
    }
}

fig = go.Figure(data=data, layout=layout)


iplot(fig)

"""#Effect of car year by distance of use"""

df_km_year = df.groupby(["Year"]).agg({
    "Kilometers_Driven" : "mean"
})
df_km_year = df_km_year.sort_values(by="Year")
df_km_year = df_km_year.reset_index()

df_km_year

enable_plotly_in_cell()

data = go.Bar (
x=df_km_year.Year,
y=df_km_year.Kilometers_Driven,
text = df_km_year.Kilometers_Driven,
textposition= 'auto',
)

layout = {
    "title":{
        "text" : "Kilometers Driven Per Year",
        "x":0.5,
    },
    "xaxis":{
        "title":"Year",
        "tickangle": 45,
    },
    "yaxis":{
        "title":"Kilometers Driven",
    }
}

fig = go.Figure(data=data, layout=layout)


iplot(fig)

"""# Outliers in Kilometers Driven

We can conclude a data is an outlier by looking at the IQR
"""

Q1 = df[["Kilometers_Driven"]].quantile(0.25)
Q3 = df[["Kilometers_Driven"]].quantile(0.75)
IQR = Q3-Q1
print ("The interquartile range : ", IQR)

import matplotlib.pyplot as plt
plt.boxplot(df["Kilometers_Driven"])
plt.show()

enable_plotly_in_cell()
data = go.Scatter (
    x=df.Name,
    y=df.Kilometers_Driven,
    mode = "markers",
    name = "KM Driven Outliers"

)
fig = go.Figure(data=data)
iplot(fig)



"""# Best Saving Fuel Type

Convert Mileage to Numbers
"""

df.Mileage = df.Mileage.apply(lambda x: str(x).split(" ")[0]).astype('float64')

"""Group By Fuel Type"""

df_best_fuel = df.groupby(["Fuel_Type"]).agg({
    "Mileage" : "mean"
})
df_best_fuel = df_best_fuel.sort_values(by="Mileage")
df_best_fuel = df_best_fuel.reset_index()
df_best_fuel

"""We can conclude that the best saving energy Fuel type is CNG because it has the lowest Mileage average"""



"""# Total Car per Owner Type for every Car Brand"""

df_owntype = df.groupby(["Owner_Type","Merek"]).agg({
    "Name" : "count"
})
df_owntype = df_owntype.sort_values(by="Name",ascending = False)
df_owntype = df_owntype.reset_index()
df_owntype

df_owntype.head(20)

enable_plotly_in_cell()

bar1 = go.Bar (
x=df_owntype[df_owntype.Owner_Type == "First"].Merek,
y=df_owntype[df_owntype.Owner_Type == "First"].Name,
    name = "First"
)

bar2 = go.Bar (
x=df_owntype[df_owntype.Owner_Type == "Second"].Merek,
y=df_owntype[df_owntype.Owner_Type == "Second"].Name,
    name = "Second"
)

bar3 = go.Bar (
x=df_owntype[df_owntype.Owner_Type == "Third"].Merek,
y=df_owntype[df_owntype.Owner_Type == "Third"].Name,
    name = "Third"
)

bar4 = go.Bar (
x=df_owntype[df_owntype.Owner_Type == "Fourth & Above"].Merek,
y=df_owntype[df_owntype.Owner_Type == "Fourth & Above"].Name,
    name = "Fourth & Above"
)


data = [bar1,bar2,bar3,bar4]
fig = go.Figure(data=data)
iplot(fig)



"""# The attribute that most influences the price of the car"""

df['Transmission'].replace('Manual', 0, inplace=True)
df['Transmission'].replace('Automatic', 1, inplace=True)
df['Owner_Type'].replace('First', 1, inplace=True)
df['Owner_Type'].replace('Second', 2, inplace=True)
df['Owner_Type'].replace('Third', 3, inplace=True)
df['Owner_Type'].replace('Fourth & Above', 4, inplace=True)

import seaborn as sns

plt.subplots(figsize=(10,8))
sns.heatmap(df.corr(), cmap="coolwarm", annot=True,)

plt.savefig(fname='no10', bbox_inches='tight')
plt.show()



"""Most Influenced Attributes for Car Price

1.   Power
2.   Engine
3.  Transmission
4. Mileage
5. Year
6. Seats
7. Owner Type
8. Kilometers Driven
"""



"""# The influence of Car Brand on Car Prices"""

df_brand_price = df.groupby(["Merek"]).agg({
    "Price" : "mean"
})
df_brand_price = df_brand_price.sort_values(by="Price", ascending = False)
df_brand_price = df_brand_price.reset_index()

df_brand_price

print("Top 5 Most Expensive Cars", df_brand_price.head(5))

print("Top 5 Cheapest Cars", df_brand_price.tail(5))



"""# Average Car Prices per Brand on each Cities"""

df_brand_city = df.groupby(["Location","Merek"]).agg({
    "Price":"mean"
})
df_brand_city = df_brand_city.sort_values(by=["Merek","Price"],ascending = False)
df_brand_city = df_brand_city.reset_index()





"""# Percentages of Car Brand"""

enable_plotly_in_cell()
data = go.Pie (labels=df_carBrand_total.Merek,values=df_carBrand_total.Name)
fig = go.Figure(data=data)
iplot(fig)



"""# Best Fuel Saving Car"""

df_brand_bb = df.groupby(["Merek"]).agg({
    "Mileage" : "mean"
    })
df_brand_bb = df_brand_bb.sort_values(by="Mileage", ascending = False)
df_brand_bb = df_brand_bb.reset_index()

df_brand_bb

print("Best Fuel Saving Car is")
df_brand_bb.head(1)

